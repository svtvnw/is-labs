#распознование прописных цифр из бд MNIST

import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist
from tensorflow import keras
from tensorflow.keras.layers import Dense, Flatten


(x_train, y_train), (x_test, y_test)=mnist.load_data()

x_train = x_train / 255
x_test = x_test / 255

y_train_cat = keras.utils.to_categorical (y_train, 10)
y_test_cat = keras.utils.to_categorical (y_train, 10)

#выбираем 5 изображений
plt.figure(figsize=(5,5))
for i in range(5):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(x_train[i], cmap=plt.cm.binary)

    plt.show()


    model = keras.Sequential([
        Flatten(input_shape=(28,28,1)),
        Dense(128, activation='relu'),
        Dense(10, activation='softmax')
    ])

print(model.summary()) #вывод структуры в консоль

model.compile(optimizer='adam',
              loss='categorical_crossentropy',
              metrics=['accuracy'])

model.fit(x_train, y_train_cat, batch_size=30, epochs=3, validation_split=0.3)

model.evaluate(x_train, y_train_cat)

n=0
x = np.expand_dims(x_test[n], axis=0)
res = model.predict(x)
print( res )
print(f"Распознанная цифра: {np.argmax(res)}")

plt.imshow(x_test[n], cmap=plt.cm.binary)
plt.show()

# Распознавание всей тестовой выборки
pred = model.predict(x_test)
pred = np.argmax(pred, axis=1)

print(pred.shape)

print(pred[:5])
print(y_test[:5])



# Выделение неверных вариантов
mask = pred == y_test
print(mask[:5])

x_false = x_test[~mask]
y_false = pred[~mask]

print(x_false.shape)

 #Вывод первых 5 неверных результатов
plt.figure(figsize=(5,5))
for i in range(5):
    print("Значение нсети: "+str(y_test[i]))
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(x_false[i], cmap=plt.cm.binary)

plt.show()
